{"version":3,"sources":["img/logo.svg","components/header/header.jsx","components/start/start.jsx","components/modal/modal.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","src","Logo","alt","onClick","e","showModal","Start","Modal","console","log","closeModal","modalData","modalText","App","_handleShowModal","modalNumberValue","setState","_handleCloseModal","state","jokerModal","this","modalVisible","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,kC,kRCI9BC,EAAS,SAACC,GACrB,OACE,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QAAO,yBAAKC,IAAKC,IAAMC,IAAI,UAC1C,wBAAIH,UAAU,UACZ,4BAAI,4BAAQI,QAAS,SAACC,GAAD,OAAON,EAAMO,cAAa,8BAAM,uBAAGN,UAAU,sBAAnB,YAC/C,4BAAI,4BAAQI,QAAS,SAACC,GAAD,OAAON,EAAMO,cAAa,8BAAM,uBAAGN,UAAU,sBAAnB,eCR5CO,G,MAAQ,WACnB,OACE,yBAAKP,UAAU,2BACb,yBAAKA,UAAU,WACb,kCAAO,6BAAP,IAAa,6BAAb,eAA8B,6BAA9B,QACA,4BAAQA,UAAU,eAAlB,aCLKQ,G,MAAQ,SAACT,GAGpB,OAFAU,QAAQC,IAAIX,GAGV,yBAAKC,UAAU,mBACb,4BAAQA,UAAU,cAAcI,QAAS,SAACC,GAAD,OAAON,EAAMY,WAAWN,KAAI,uBAAGL,UAAU,iBAClF,yBAAKA,UAAU,WACb,yBAAKA,UAAU,cAAcD,EAAMa,UAAUC,eCsCtCC,E,YAzCb,aAAc,IAAD,8BACX,+CASFC,iBAAmB,SAACC,GAClB,EAAKC,SAAS,CACZD,iBAAkBA,EAClBV,WAAW,KAbF,EAgBbY,kBAAoB,WAClB,EAAKD,SAAS,CACZD,kBAAmB,EACnBV,WAAW,KAjBb,EAAKa,MAAQ,CACXb,WAAW,EACXU,kBAAmB,EACnBI,WAAY,CACVP,UAAW,WANJ,E,sEAsBJ,IAAD,EAC4CQ,KAAKF,MAAhDb,EADD,EACCA,UAA6Bc,GAD9B,EACYJ,iBADZ,EAC8BI,YACpC,OACE,yBAAKpB,UAAU,OACXM,GACA,kBAAC,EAAD,CACEgB,aAAchB,EACdM,UAAWQ,EACXT,WAAYU,KAAKH,oBAErB,kBAAC,EAAD,CAAQZ,UAAWe,KAAKN,mBACxB,yBAAKf,UAAU,gBACb,kBAAC,EAAD,Y,GAnCQuB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.10938e72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9043c833.svg\";","import React from 'react';\nimport './header.scss';\nimport Logo from '../../img/logo.svg';\n\nexport const Header = (props) => {\n  return(\n    <header className=\"header\">\n      <div className=\"content\">\n        <div className=\"logo\"><img src={Logo} alt=\"Logo\"/></div>\n        <ul className=\"jokers\">\n          <li><button onClick={(e) => props.showModal()}><span><i className=\"fa fa-angle-right\"></i>Jokers</span></button></li>\n          <li><button onClick={(e) => props.showModal()}><span><i className=\"fa fa-angle-right\"></i>Rules</span></button></li>\n        </ul>\n      </div>\n    </header>\n  )\n}","import React from 'react';\nimport './start.scss';\n\nexport const Start = () => {\n  return(\n    <div className=\"container inital-screen\">\n      <div className=\"content\">\n        <h1>RNS<br/>&<br/>Homework Hub<br/>Quiz</h1>\n        <button className=\"btn btn-red\">Start</button>\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport './modal.css';\n\nexport const Modal = (props) => {\n  console.log(props);\n  \n  return(\n    <div className=\"container modal\">\n      <button className=\"close-modal\" onClick={(e) => props.closeModal(e)}><i className=\"fa fa-times\"></i></button>\n      <div className=\"content\">\n        <div className=\"modal-text\">{props.modalData.modalText}</div>\n      </div>\n    </div>\n  )\n}","import React, { Component } from 'react';\nimport './App.scss';\nimport {Header} from './components/header/header';\nimport {Start} from './components/start/start';\nimport {Modal} from './components/modal/modal';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      showModal: false,\n      modalNumberValue: -1,\n      jokerModal: {\n        modalText: 'senka1'\n      }\n    }\n  }\n  _handleShowModal = (modalNumberValue) => {\n    this.setState({\n      modalNumberValue: modalNumberValue,\n      showModal: true\n    })\n  }\n  _handleCloseModal = () => {\n    this.setState({\n      modalNumberValue: -1,\n      showModal: false\n    })  \n  }\n  render(){\n    const {showModal, modalNumberValue, jokerModal} = this.state;\n    return (\n      <div className=\"app\">\n        { showModal && \n          <Modal \n            modalVisible={showModal} \n            modalData={jokerModal} \n            closeModal={this._handleCloseModal}/>\n        }\n        <Header showModal={this._handleShowModal}/>\n        <div className=\"app__content\">\n          <Start/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}